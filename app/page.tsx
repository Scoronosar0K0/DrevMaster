"use client";
import { useEffect, useState } from "react";
import Link from "next/link";

interface DashboardStats {
  totalOrders: number;
  pendingOrders: number;
  totalBalance: number;
  suppliersCount: number;
}

interface ActivityLog {
  id: number;
  user_id: number;
  user_name: string;
  action: string;
  entity_type: string;
  entity_id?: number;
  details?: string;
  created_at: string;
}

export default function Dashboard() {
  const [stats, setStats] = useState<DashboardStats>({
    totalOrders: 0,
    pendingOrders: 0,
    totalBalance: 0,
    suppliersCount: 0,
  });
  const [recentActivities, setRecentActivities] = useState<ActivityLog[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    fetchStats();
    fetchRecentActivities();
  }, []);

  const fetchStats = async () => {
    try {
      const response = await fetch("/api/dashboard/stats");
      const data = await response.json();
      setStats(data);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);
    }
  };

  const fetchRecentActivities = async () => {
    try {
      const response = await fetch("/api/activity-logs?limit=5");
      const data = await response.json();
      setRecentActivities(Array.isArray(data) ? data.slice(0, 3) : []);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", error);
      setRecentActivities([]);
    } finally {
      setLoading(false);
    }
  };

  const getActivityIcon = (action: string) => {
    switch (action) {
      case "—Å–æ–∑–¥–∞–Ω":
      case "–∑–∞–∫–∞–∑_—Å–æ–∑–¥–∞–Ω":
        return "üì¶";
      case "–∑–∞–π–º_–≤–∑—è—Ç":
      case "–∑–∞–π–º_–ø–æ–≥–∞—à–µ–Ω":
        return "üí∞";
      case "–æ–ø–ª–∞—Ç–∞_—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞":
        return "üöõ";
      case "–æ–ø–ª–∞—Ç–∞_–ø–æ—à–ª–∏–Ω—ã":
      case "–æ–ø–ª–∞—Ç–∞_—Ç–∞–º–æ–∂–Ω–∏":
        return "üö¢";
      case "–ø—Ä–æ–¥–∞–∂–∞":
        return "üíµ";
      case "–æ–±–Ω–æ–≤–ª–µ–Ω":
        return "‚úèÔ∏è";
      case "—É–¥–∞–ª–µ–Ω":
        return "üóëÔ∏è";
      case "–≤—Ö–æ–¥":
        return "üîê";
      default:
        return "üìù";
    }
  };

  const getActivityTitle = (log: ActivityLog) => {
    switch (log.action) {
      case "—Å–æ–∑–¥–∞–Ω":
        if (log.entity_type === "partner") return "–ù–æ–≤—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä";
        if (log.entity_type === "supplier") return "–ù–æ–≤—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫";
        return "–°–æ–∑–¥–∞–Ω –æ–±—ä–µ–∫—Ç";
      case "–∑–∞–∫–∞–∑_—Å–æ–∑–¥–∞–Ω":
        return "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω";
      case "–∑–∞–π–º_–≤–∑—è—Ç":
        return "–ó–∞–π–º –ø–æ–ª—É—á–µ–Ω";
      case "–∑–∞–π–º_–ø–æ–≥–∞—à–µ–Ω":
        return "–ó–∞–π–º –ø–æ–≥–∞—à–µ–Ω";
      case "–æ–ø–ª–∞—Ç–∞_—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞":
        return "–û–ø–ª–∞—Ç–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞";
      case "–æ–ø–ª–∞—Ç–∞_—Ç–∞–º–æ–∂–Ω–∏":
        return "–û–ø–ª–∞—Ç–∞ —Ç–∞–º–æ–∂–Ω–∏";
      case "–ø—Ä–æ–¥–∞–∂–∞":
        return "–ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–∞";
      default:
        return log.action;
    }
  };

  const formatTime = (dateString: string) => {
    const date = new Date(dateString);
    const now = new Date();
    const diffMs = now.getTime() - date.getTime();
    const diffHours = Math.floor(diffMs / 3600000);

    if (diffHours < 1) return "–Ω–µ–¥–∞–≤–Ω–æ";
    if (diffHours < 24) return `${diffHours} —á –Ω–∞–∑–∞–¥`;

    const diffDays = Math.floor(diffMs / 86400000);
    if (diffDays === 1) return "–≤—á–µ—Ä–∞";
    if (diffDays < 7) return `${diffDays} –¥–Ω –Ω–∞–∑–∞–¥`;

    return date.toLocaleDateString("ru-RU");
  };

  const quickActions = [
    {
      title: "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑",
      description: "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑",
      href: "/orders",
      icon: "üì¶",
      color: "from-blue-500 to-indigo-600",
      bgColor: "bg-blue-50 hover:bg-blue-100",
    },
    {
      title: "–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞",
      description: "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞",
      href: "/partners",
      icon: "ü§ù",
      color: "from-green-500 to-emerald-600",
      bgColor: "bg-green-50 hover:bg-green-100",
    },
    {
      title: "–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–∞—Å—Å–æ–π",
      description: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏",
      href: "/cash",
      icon: "üí∞",
      color: "from-yellow-500 to-orange-600",
      bgColor: "bg-yellow-50 hover:bg-yellow-100",
    },
    {
      title: "–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏",
      description: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏",
      href: "/suppliers",
      icon: "üè≠",
      color: "from-purple-500 to-indigo-600",
      bgColor: "bg-purple-50 hover:bg-purple-100",
    },
  ];

  const statCards = [
    {
      title: "–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤",
      value: stats.totalOrders,
      icon: "üì¶",
      color: "from-blue-500 to-blue-600",
      bgColor: "bg-blue-50",
      textColor: "text-blue-700",
    },
    {
      title: "–í –æ–∂–∏–¥–∞–Ω–∏–∏",
      value: stats.pendingOrders,
      icon: "‚è≥",
      color: "from-yellow-500 to-yellow-600",
      bgColor: "bg-yellow-50",
      textColor: "text-yellow-700",
    },
    {
      title: "–ë–∞–ª–∞–Ω—Å",
      value: `$${stats.totalBalance.toLocaleString()}`,
      icon: "üí∞",
      color: "from-green-500 to-green-600",
      bgColor: "bg-green-50",
      textColor: "text-green-700",
    },
    {
      title: "–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏",
      value: stats.suppliersCount,
      icon: "üè≠",
      color: "from-purple-500 to-purple-600",
      bgColor: "bg-purple-50",
      textColor: "text-purple-700",
    },
  ];

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 via-blue-50 to-indigo-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6 sm:py-8">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="mb-8 sm:mb-12 text-center sm:text-left">
          <h1 className="text-3xl sm:text-4xl lg:text-5xl font-bold text-gray-900 mb-3 sm:mb-4">
            –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤{" "}
            <span className="bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent">
              DrevMaster
            </span>
          </h1>
          <p className="text-base sm:text-lg text-gray-600 max-w-2xl">
            –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ—Ä–µ–≤–æ–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–º –±–∏–∑–Ω–µ—Å–æ–º
          </p>
        </div>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ */}
        <div className="grid grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-6 mb-8 sm:mb-12">
          {statCards.map((card, index) => (
            <div
              key={card.title}
              className={`${card.bgColor} rounded-xl sm:rounded-2xl p-4 sm:p-6 border border-white/50 backdrop-blur-sm shadow-sm hover:shadow-md transition-all duration-300 transform hover:-translate-y-1`}
              style={{
                animationDelay: `${index * 100}ms`,
                animation: "slideInUp 0.6s ease-out forwards",
              }}
            >
              <div className="flex items-center justify-between mb-3 sm:mb-4">
                <div
                  className={`w-10 h-10 sm:w-12 sm:h-12 bg-gradient-to-r ${card.color} rounded-lg sm:rounded-xl flex items-center justify-center text-lg sm:text-xl shadow-lg`}
                >
                  {card.icon}
                </div>
              </div>
              <div>
                <h3
                  className={`text-xs sm:text-sm font-medium ${card.textColor} mb-1 sm:mb-2`}
                >
                  {card.title}
                </h3>
                <p className="text-xl sm:text-2xl lg:text-3xl font-bold text-gray-900">
                  {card.value}
                </p>
              </div>
            </div>
          ))}
        </div>

        {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
        <div className="mb-8 sm:mb-12">
          <h2 className="text-xl sm:text-2xl font-bold text-gray-900 mb-4 sm:mb-6 text-center sm:text-left">
            –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
          </h2>
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6">
            {quickActions.map((action, index) => (
              <Link
                key={action.title}
                href={action.href}
                className={`${action.bgColor} rounded-xl sm:rounded-2xl p-4 sm:p-6 border border-white/50 backdrop-blur-sm transition-all duration-300 transform hover:-translate-y-2 hover:shadow-lg group`}
                style={{
                  animationDelay: `${(index + 4) * 100}ms`,
                  animation: "slideInUp 0.6s ease-out forwards",
                }}
              >
                <div className="flex flex-col items-center text-center">
                  <div
                    className={`w-12 h-12 sm:w-16 sm:h-16 bg-gradient-to-r ${action.color} rounded-xl sm:rounded-2xl flex items-center justify-center text-2xl sm:text-3xl mb-3 sm:mb-4 shadow-lg group-hover:scale-110 transition-transform duration-300`}
                  >
                    {action.icon}
                  </div>
                  <h3 className="text-sm sm:text-lg font-semibold text-gray-900 mb-1 sm:mb-2">
                    {action.title}
                  </h3>
                  <p className="text-xs sm:text-sm text-gray-600 leading-relaxed">
                    {action.description}
                  </p>
                </div>
              </Link>
            ))}
          </div>
        </div>

        {/* –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ */}
        <div className="mb-12">
          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-4 sm:mb-6">
            <h2 className="text-xl sm:text-2xl font-bold text-gray-900 mb-3 sm:mb-0">
              –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            </h2>
            <Link
              href="/history"
              className="inline-flex items-center text-sm font-medium text-blue-600 hover:text-blue-500 transition-colors self-start sm:self-auto"
            >
              –°–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ
              <svg
                className="ml-1 w-4 h-4"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M9 5l7 7-7 7"
                />
              </svg>
            </Link>
          </div>

          <div className="bg-white rounded-xl sm:rounded-2xl shadow-lg border border-white/50 p-4 sm:p-6 space-y-3 sm:space-y-4">
            {loading ? (
              <div className="flex items-center justify-center py-8">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                <span className="ml-3 text-gray-600">
                  –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...
                </span>
              </div>
            ) : recentActivities.length === 0 ? (
              <div className="text-center py-8">
                <div className="text-4xl mb-3">üìà</div>
                <p className="text-gray-500">
                  –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–∫–∞ –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞
                </p>
              </div>
            ) : (
              recentActivities.map((activity, index) => (
                <div
                  key={activity.id}
                  className="flex items-start space-x-3 sm:space-x-4 p-3 sm:p-4 bg-gray-50 rounded-lg sm:rounded-xl hover:bg-gray-100 transition-colors"
                  style={{
                    animationDelay: `${index * 100}ms`,
                    animation: "slideInUp 0.6s ease-out forwards",
                  }}
                >
                  <div className="w-8 h-8 sm:w-10 sm:h-10 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0">
                    <span className="text-lg sm:text-xl">
                      {getActivityIcon(activity.action)}
                    </span>
                  </div>
                  <div className="flex-1 min-w-0">
                    <p className="text-sm sm:text-base font-medium text-gray-900">
                      {getActivityTitle(activity)}
                    </p>
                    <p className="text-xs sm:text-sm text-gray-500 mt-1">
                      {activity.details ||
                        `${activity.user_name || "–°–∏—Å—Ç–µ–º–∞"} –≤—ã–ø–æ–ª–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ`}
                    </p>
                    <p className="text-xs text-gray-400 mt-1">
                      {formatTime(activity.created_at)}
                    </p>
                  </div>
                </div>
              ))
            )}
          </div>
        </div>
      </div>
    </div>
  );
}
