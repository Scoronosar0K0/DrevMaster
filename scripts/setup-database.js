const { Pool } = require("pg");
const bcrypt = require("bcryptjs");
require("dotenv").config();

async function setupDatabase() {
  const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl:
      process.env.NODE_ENV === "production"
        ? { rejectUnauthorized: false }
        : false,
  });

  try {
    console.log("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö DrevMaster...");

    // –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    const migrate = require("./migrate-database");
    await migrate();

    // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const adminResult = await pool.query(
      "SELECT id FROM users WHERE username = $1",
      ["admin"]
    );

    if (adminResult.rows.length === 0) {
      const hashedPassword = await bcrypt.hash("admin", 10);

      await pool.query(
        `INSERT INTO users (username, password, role, name, email)
         VALUES ($1, $2, $3, $4, $5)`,
        [
          "admin",
          hashedPassword,
          "admin",
          "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
          "admin@drevmaster.com",
        ]
      );

      console.log("‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin —Å –ø–∞—Ä–æ–ª–µ–º: admin");
    } else {
      console.log("‚ÑπÔ∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    await createSampleData(pool);

    console.log("üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
    console.log("üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:");
    console.log("   –õ–æ–≥–∏–Ω: admin");
    console.log("   –ü–∞—Ä–æ–ª—å: admin");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", error);
    throw error;
  } finally {
    await pool.end();
  }
}

async function createSampleData(pool) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const suppliersResult = await pool.query("SELECT COUNT(*) FROM suppliers");
    const suppliersCount = parseInt(suppliersResult.rows[0].count);

    if (suppliersCount === 0) {
      console.log("–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...");

      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
      const supplierResult = await pool.query(
        `INSERT INTO suppliers (name, contact_person, phone, email, address, description)
         VALUES ($1, $2, $3, $4, $5, $6) RETURNING id`,
        [
          '–û–û–û "–õ–µ—Å–æ–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫"',
          "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á",
          "+7 (495) 123-45-67",
          "info@wood-supplier.ru",
          "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ—Å–Ω–∞—è, –¥. 10",
          "–ü–æ—Å—Ç–∞–≤—â–∏–∫ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –¥—Ä–µ–≤–µ—Å–∏–Ω—ã",
        ]
      );
      const supplierId = supplierResult.rows[0].id;

      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
      const itemResult1 = await pool.query(
        `INSERT INTO supplier_items (supplier_id, name) VALUES ($1, $2) RETURNING id`,
        [supplierId, "–°–æ—Å–Ω–æ–≤–∞—è –¥–æ—Å–∫–∞"]
      );

      const itemResult2 = await pool.query(
        `INSERT INTO supplier_items (supplier_id, name) VALUES ($1, $2) RETURNING id`,
        [supplierId, "–ë–µ—Ä–µ–∑–æ–≤–∞—è —Ñ–∞–Ω–µ—Ä–∞"]
      );

      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
      const hashedPassword = await bcrypt.hash("partner123", 10);
      const userResult = await pool.query(
        `INSERT INTO users (username, password, role, name, email, phone)
         VALUES ($1, $2, $3, $4, $5, $6) RETURNING id`,
        [
          "partner1",
          hashedPassword,
          "partner",
          "–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á",
          "partner@example.com",
          "+7 (495) 987-65-43",
        ]
      );
      const userId = userResult.rows[0].id;

      await pool.query(
        `INSERT INTO partners (user_id, description)
         VALUES ($1, $2)`,
        [userId, "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏"]
      );

      console.log("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã");
      console.log("üìã –¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä:");
      console.log("   –õ–æ–≥–∏–Ω: partner1");
      console.log("   –ü–∞—Ä–æ–ª—å: partner123");
    } else {
      console.log("‚ÑπÔ∏è  –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç");
    }
  } catch (error) {
    console.error("‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:", error);
    // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  }
}

if (require.main === module) {
  setupDatabase().catch(console.error);
}

module.exports = setupDatabase;
